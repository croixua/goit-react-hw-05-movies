{"version":3,"file":"static/js/movies-cast.f5838321.chunk.js","mappings":"2NAEA,MCAe,YAA6B,IAATA,EAAQ,EAARA,KACjC,OACE,wBACGA,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,GAAlC,OACR,2BACE,gBAAKC,IAAG,UAPD,mCAOC,OAAgBF,GAAgBG,IAAKJ,KAC7C,kCAAUD,MACV,uCAAeC,OAHRE,S,kBCJjB,MCIe,WACb,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAoBE,EAAAA,EAAAA,YAApB,eAAOL,EAAP,KAAWM,EAAX,KACA,GAAwBD,EAAAA,EAAAA,YAAxB,eAAOV,EAAP,KAAaY,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACRJ,EAAMH,KACL,CAACA,KAEJO,EAAAA,EAAAA,YAAU,WACHV,GAELW,EAAAA,GAAwBX,GACrBY,MAAK,gBAAGjB,EAAH,EAAGA,KAAH,OAAcY,EAAQZ,MAC3BkB,OAAM,gBAAGC,EAAH,EAAGA,QAAH,OAAiBL,EAASK,QAClC,CAACd,KAGF,gCACGL,IAAQ,SAAC,EAAD,CAAUA,KAAMA,IACxBa,IAAS,SAACO,EAAA,EAAD,CAAUD,QAASN,S,oLC3B7BQ,EAAU,mCACVC,EAAW,+BAEXC,EAAgB,gBAChBC,EAAc,UAApB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAA5C,SACoBC,MAAMD,GAD1B,cACQE,EADR,gBAEqBA,EAAIC,OAFzB,cAEQC,EAFR,yBAISA,GAJT,mEAOA,IAAMC,EAAa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAKA,GAA8B,IAAnBA,EAAQC,OAGjBD,EAFEE,QAAQC,OAAO,IAAIC,MAAM,yBAK9BC,EAAa,SAAAC,GACjB,OAAKA,IAAuB,IAAhBA,EAAIC,SAAqBD,EAAItC,KAChCkC,QAAQC,OAAO,IAAIC,MAAJ,oBAGjBE,GAGF,SAASE,IAGd,OAAOf,EAFE,UAAMH,GAAN,OA3BY,sBA2BZ,oBAA2CD,IAEjBJ,KAAKc,GAGnC,SAASU,IAAgC,IAAnBC,EAAkB,uDAAJ,GACnChB,EAAG,UAAMJ,GAAN,OAAiBC,EAAjB,oBAA0CF,EAA1C,kBAA2DqB,GAEpE,OAAKA,EAAYC,OAEVlB,EAAuBC,GAAKT,KAAKc,GAFRa,MAAM,mBAKjC,SAASC,EAAgBxC,GAG9B,OAAOoB,EAFE,UAAMH,GAAN,OAAiBE,GAAjB,OAA+BnB,EAA/B,oBAA6CgB,IAEnBJ,KAAKoB,GAGnC,SAASS,EAAoBzC,GAGlC,OAAOoB,EAFE,UAAMH,GAAN,OAAiBE,GAAjB,OAA+BnB,EAA/B,4BAAqDgB,IAE3BJ,KAAKoB,GAEnC,SAASU,EAAuB1C,GAGrC,OAAOoB,EAFE,UAAMH,GAAN,OAAiBE,GAAjB,OAA+BnB,EAA/B,4BAAqDgB,IAE3BJ,KAAKc,K,iECxD3B,SAASX,EAAT,GAAgC,IAAZD,EAAW,EAAXA,QACjC,OAAO,wBAAKA","sources":["views/MovieCastView/index.js","views/MovieCastView/MovieCastView.jsx","components/MoviesPage/MovieDetailsPage/MovieCast/index.js","components/MoviesPage/MovieDetailsPage/MovieCast/MovieCast.jsx","services/API.js","views/NotFound/NotFound.jsx"],"sourcesContent":["import MovieCastView from './MovieCastView';\n\nexport default MovieCastView;\n","const BASE_URL = 'https://image.tmdb.org/t/p/w200';\n\nexport default function CastView({ cast }) {\n  return (\n    <ul>\n      {cast.map(({ name, character, profile_path, id }) => (\n        <li key={id}>\n          <img src={`${BASE_URL}${profile_path}`} alt={character}></img>\n          <p>Name: {name}</p>\n          <p>Character: {character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import MovieCast from './MovieCast';\n\nexport default MovieCast;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport CastView from 'views/MovieCastView';\nimport * as API from '../../../../services/API';\nimport NotFound from 'views/NotFound/NotFound';\n\nexport default function MovieCast() {\n  const { movieId } = useParams();\n  const [id, setID] = useState();\n  const [cast, setCast] = useState();\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setID(movieId);\n  }, [movieId]);\n\n  useEffect(() => {\n    if (!id) return;\n\n    API.searchMovieCastByID(id)\n      .then(({ cast }) => setCast(cast))\n      .catch(({ message }) => setError(message));\n  }, [id]);\n\n  return (\n    <>\n      {cast && <CastView cast={cast} />}\n      {error && <NotFound message={error} />}\n    </>\n  );\n}\n","const API_KEY = '31a0dc93409a2f9cdc2f4d925fcba2bc';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst TRENDING_MOVIE = '/trending/movie/day';\nconst SEARCH_MOVIES = '/search/movie';\nconst MOVIE_BY_ID = '/movie/';\n\nasync function fetchWithErrorHandling(url = '') {\n  const res = await fetch(url);\n  const data = await res.json();\n\n  return data;\n}\n\nconst checkDates = ({ results }) => {\n  if (!results || results.length === 0)\n    return Promise.reject(new Error('No movies requested'));\n\n  return results;\n};\n\nconst checkMovie = obj => {\n  if (!obj || obj.success === false || obj.cast) {\n    return Promise.reject(new Error(`Not found movie`));\n  }\n\n  return obj;\n};\n\nexport function fetchTrendingMovies() {\n  const url = `${BASE_URL}${TRENDING_MOVIE}?api_key=${API_KEY}`;\n\n  return fetchWithErrorHandling(url).then(checkDates);\n}\n\nexport function searchMovies(searchQuery = '') {\n  const url = `${BASE_URL}${SEARCH_MOVIES}?api_key=${API_KEY}&query=${searchQuery}`;\n\n  if (!searchQuery.trim()) return alert('enter the movie');\n\n  return fetchWithErrorHandling(url).then(checkDates);\n}\n\nexport function searchMovieByID(id) {\n  const url = `${BASE_URL}${MOVIE_BY_ID}${id}?api_key=${API_KEY}`;\n\n  return fetchWithErrorHandling(url).then(checkMovie);\n}\n\nexport function searchMovieCastByID(id) {\n  const url = `${BASE_URL}${MOVIE_BY_ID}${id}/credits?api_key=${API_KEY}`;\n\n  return fetchWithErrorHandling(url).then(checkMovie);\n}\nexport function searchMovieReviewsByID(id) {\n  const url = `${BASE_URL}${MOVIE_BY_ID}${id}/reviews?api_key=${API_KEY}`;\n\n  return fetchWithErrorHandling(url).then(checkDates);\n}\n","export default function NotFound({ message }) {\n  return <h1>{message}</h1>;\n}\n"],"names":["cast","map","name","character","profile_path","id","src","alt","movieId","useParams","useState","setID","setCast","error","setError","useEffect","API","then","catch","message","NotFound","API_KEY","BASE_URL","SEARCH_MOVIES","MOVIE_BY_ID","fetchWithErrorHandling","url","fetch","res","json","data","checkDates","results","length","Promise","reject","Error","checkMovie","obj","success","fetchTrendingMovies","searchMovies","searchQuery","trim","alert","searchMovieByID","searchMovieCastByID","searchMovieReviewsByID"],"sourceRoot":""}