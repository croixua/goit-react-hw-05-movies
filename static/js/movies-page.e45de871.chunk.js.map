{"version":3,"file":"static/js/movies-page.e45de871.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MoviesPage/SearchBar/SearchBar.module.css?40e8","components/MoviesPage/SearchBar/index.js","components/MoviesPage/SearchBar/SearchBar.jsx","components/MoviesPage/index.js","components/MoviesPage/MoviesPage.jsx","services/API.js","views/List/index.js","views/List/List.jsx","views/NotFound/NotFound.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchBar_form__WUc1Z\",\"button\":\"SearchBar_button__CJvWU\",\"buttonLabel\":\"SearchBar_buttonLabel__Fbi8z\",\"input\":\"SearchBar_input__GJmyc\"};","import SearchBar from './SearchBar';\n\nexport default SearchBar;\n","import { useState } from 'react';\nimport { FiSearch } from 'react-icons/fi';\nimport s from './SearchBar.module.css';\n\nexport default function SearchBar({ onSubmit }) {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleChange = e => {\n    const inputValue = e.target.value;\n\n    setInputValue(inputValue);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (inputValue.trim() === '') return alert('Введите поисковый запрос');\n    onSubmit(inputValue);\n\n    setInputValue('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <button type=\"submit\" className={s.button}>\n        <FiSearch size=\"1.5em\" />\n      </button>\n\n      <input\n        value={inputValue}\n        onChange={handleChange}\n        className={s.input}\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n      />\n    </form>\n  );\n}\n","import MoviesPage from './MoviesPage';\n\nexport default MoviesPage;\n","import { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport Skeleton from 'react-loading-skeleton';\nimport SearchBar from './SearchBar';\nimport List from 'views/List';\nimport NotFound from 'views/NotFound/NotFound';\nimport * as API from 'services/API';\nimport 'react-loading-skeleton/dist/skeleton.css';\n\nexport default function MoviesPage() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const query = new URLSearchParams(location.search).get('query');\n\n    if (!query) return;\n    setIsLoading(true);\n    setError(null);\n    setMovies([]);\n\n    fetchMovies(query);\n  }, [location.search]);\n\n  const fetchMovies = async query => {\n    await API.searchMovies(query)\n      .then(setMovies)\n      .catch(({ message }) => setError(message));\n\n    setIsLoading(false);\n  };\n\n  const handleSubmit = query => {\n    navigate(`?query=${query}`);\n  };\n\n  return (\n    <>\n      <SearchBar onSubmit={handleSubmit} />\n\n      {movies && <List movies={movies} />}\n      {error && <NotFound message={error} />}\n      {isLoading && <Skeleton count={10} width={400} />}\n    </>\n  );\n}\n","const API_KEY = '31a0dc93409a2f9cdc2f4d925fcba2bc';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst TRENDING_MOVIE = '/trending/movie/day';\nconst SEARCH_MOVIES = '/search/movie';\nconst MOVIE_BY_ID = '/movie/';\n\nasync function fetchWithErrorHandling(url = '') {\n  const res = await fetch(url);\n  const data = await res.json();\n\n  return data;\n}\n\nconst checkDates = ({ results }) => {\n  if (!results || results.length === 0)\n    return Promise.reject(new Error('No movies requested'));\n\n  return results;\n};\n\nconst checkMovie = obj => {\n  if (!obj || obj.success === false) {\n    return Promise.reject(new Error(`Not found movie`));\n  }\n\n  return obj;\n};\n\nexport function fetchTrendingMovies() {\n  const url = `${BASE_URL}${TRENDING_MOVIE}?api_key=${API_KEY}`;\n\n  return fetchWithErrorHandling(url).then(checkDates);\n}\n\nexport function searchMovies(searchQuery = '') {\n  const url = `${BASE_URL}${SEARCH_MOVIES}?api_key=${API_KEY}&query=${searchQuery}`;\n\n  if (!searchQuery.trim()) return alert('enter the movie');\n\n  return fetchWithErrorHandling(url).then(checkDates);\n}\n\nexport function searchMovieByID(id) {\n  const url = `${BASE_URL}${MOVIE_BY_ID}${id}?api_key=${API_KEY}`;\n\n  return fetchWithErrorHandling(url).then(checkMovie);\n}\n\nexport function searchMovieCastByID(id) {\n  const url = `${BASE_URL}${MOVIE_BY_ID}${id}/credits?api_key=${API_KEY}`;\n\n  return fetchWithErrorHandling(url).then(checkMovie);\n}\nexport function searchMovieReviewsByID(id) {\n  const url = `${BASE_URL}${MOVIE_BY_ID}${id}/reviews?api_key=${API_KEY}`;\n\n  return fetchWithErrorHandling(url).then(checkDates);\n}\n","import List from './List';\n\nexport default List;\n","import { Link, useLocation } from 'react-router-dom';\n\nexport default function List({ movies }) {\n  const { pathname, search } = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ original_title, id }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: { pathname, search } }}>\n            {original_title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","export default function NotFound({ message }) {\n  return <h1>{message}</h1>;\n}\n"],"names":["onSubmit","useState","inputValue","setInputValue","className","s","e","preventDefault","trim","alert","type","size","value","onChange","target","autoComplete","autoFocus","placeholder","location","useLocation","navigate","useNavigate","movies","setMovies","error","setError","isLoading","setIsLoading","useEffect","query","URLSearchParams","search","get","fetchMovies","API","then","catch","message","List","NotFound","count","width","API_KEY","BASE_URL","SEARCH_MOVIES","MOVIE_BY_ID","fetchWithErrorHandling","url","fetch","res","json","data","checkDates","results","length","Promise","reject","Error","checkMovie","obj","success","fetchTrendingMovies","searchMovies","searchQuery","searchMovieByID","id","searchMovieCastByID","searchMovieReviewsByID","pathname","map","original_title","to","state","from"],"sourceRoot":""}