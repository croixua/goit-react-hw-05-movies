{"version":3,"file":"static/js/movies-details-page.4797878f.chunk.js","mappings":"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","sources":["views/MovieView/index.js","views/MovieView/MovieView.jsx","components/MoviesPage/MovieDetailsPage/index.js","components/MoviesPage/MovieDetailsPage/MovieDetailsPage.jsx","services/API.js","views/NotFound/NotFound.jsx"],"sourcesContent":["import MovieView from './MovieView';\n\nexport default MovieView;\n","import { Link } from 'react-router-dom';\n\nconst BASE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport default function MovieView({ movieDetails, fromPage }) {\n  const { poster_path, original_title, overview, genres, vote_average } =\n    movieDetails;\n\n  return (\n    <>\n      <div>\n        <img src={`${BASE_URL}${poster_path}`} alt={original_title}></img>\n      </div>\n      <div>\n        <h2>{original_title}</h2>\n        <p>User Score: {`${vote_average}`}</p>\n\n        <h3>Overview</h3>\n        <p>{overview}</p>\n\n        <h3>Genres</h3>\n        <ul>\n          {genres.map(({ name, id }) => (\n            <li key={id}>{name}</li>\n          ))}\n        </ul>\n        <hr />\n        <p>Additional information</p>\n        <ul>\n          <li>\n            <Link to={'cast'} state={{ from: { fromPage } }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to={'reviews'} state={{ from: { fromPage } }}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n}\n","import MovieDetailsPage from './MovieDetailsPage';\n\nexport default MovieDetailsPage;\n","import { Outlet, useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport * as API from '../../../services/API';\nimport MovieView from 'views/MovieView';\nimport NotFound from 'views/NotFound/NotFound';\n\nexport default function MovieDetailsPage() {\n  const location = useLocation();\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n  const [id, setID] = useState();\n  const [movieDetails, setMovieDetails] = useState();\n  const [error, setError] = useState(null);\n\n  const fromPage = location?.state?.from || '/';\n\n  useEffect(() => {\n    setID(movieId);\n  }, [movieId]);\n\n  useEffect(() => {\n    if (!id) return;\n\n    API.searchMovieByID(id)\n      .then(setMovieDetails)\n      .catch(({ message }) => setError(message));\n  }, [id]);\n\n  const goBack = () => {\n    navigate(fromPage);\n  };\n\n  return (\n    <>\n      <button type=\"button\" onClick={goBack}>\n        Go back\n      </button>\n\n      {movieDetails && (\n        <MovieView movieDetails={movieDetails} fromPage={fromPage} />\n      )}\n      {error && <NotFound message={error} />}\n\n      <Outlet />\n    </>\n  );\n}\n","const API_KEY = '31a0dc93409a2f9cdc2f4d925fcba2bc';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst TRENDING_MOVIE = '/trending/movie/day';\nconst SEARCH_MOVIES = '/search/movie';\nconst MOVIE_BY_ID = '/movie/';\n\nasync function fetchWithErrorHandling(url = '') {\n  const res = await fetch(url);\n  const data = await res.json();\n\n  return data;\n}\n\nconst checkDates = ({ results }) => {\n  if (!results || results.length === 0)\n    return Promise.reject(new Error('No movies requested'));\n\n  return results;\n};\n\nconst checkMovie = obj => {\n  if (!obj || obj.success === false) {\n    return Promise.reject(new Error(`Not found movie`));\n  }\n\n  return obj;\n};\n\nexport function fetchTrendingMovies() {\n  const url = `${BASE_URL}${TRENDING_MOVIE}?api_key=${API_KEY}`;\n\n  return fetchWithErrorHandling(url).then(checkDates);\n}\n\nexport function searchMovies(searchQuery = '') {\n  const url = `${BASE_URL}${SEARCH_MOVIES}?api_key=${API_KEY}&query=${searchQuery}`;\n\n  if (!searchQuery.trim()) return alert('enter the movie');\n\n  return fetchWithErrorHandling(url).then(checkDates);\n}\n\nexport function searchMovieByID(id) {\n  const url = `${BASE_URL}${MOVIE_BY_ID}${id}?api_key=${API_KEY}`;\n\n  return fetchWithErrorHandling(url).then(checkMovie);\n}\n\nexport function searchMovieCastByID(id) {\n  const url = `${BASE_URL}${MOVIE_BY_ID}${id}/credits?api_key=${API_KEY}`;\n\n  return fetchWithErrorHandling(url).then(checkMovie);\n}\nexport function searchMovieReviewsByID(id) {\n  const url = `${BASE_URL}${MOVIE_BY_ID}${id}/reviews?api_key=${API_KEY}`;\n\n  return fetchWithErrorHandling(url).then(checkDates);\n}\n","export default function NotFound({ message }) {\n  return <h1>{message}</h1>;\n}\n"],"names":["movieDetails","fromPage","poster_path","original_title","overview","genres","vote_average","src","alt","map","name","id","to","state","from","location","useLocation","movieId","useParams","navigate","useNavigate","useState","setID","setMovieDetails","error","setError","useEffect","API","then","catch","message","type","onClick","NotFound","API_KEY","BASE_URL","SEARCH_MOVIES","MOVIE_BY_ID","fetchWithErrorHandling","url","fetch","res","json","data","checkDates","results","length","Promise","reject","Error","checkMovie","obj","success","fetchTrendingMovies","searchMovies","searchQuery","trim","alert","searchMovieByID","searchMovieCastByID","searchMovieReviewsByID"],"sourceRoot":""}